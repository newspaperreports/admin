// ✅ Pop-up Notification Script with License & Domain Validation

// 🔗 JSON Configuration URL (where your popup data is hosted)
const jsonUrl = "https://raw.githubusercontent.com/newspaperreports/admin@latest/asLife/todayLive.json";

// 🔗 HTML Layout URL (popup structure stored in index.html)
const htmlUrl = "https://raw.githubusercontent.com/newspaperreports/admin@latest/asLife/index.html";

// 🔗 CSS File URL (your design file)
const cssUrl = "https://cdn.jsdelivr.net/gh/newspaperreports/admin@latest/asLife/todayLive.css";

// ⏱️ Popup close button delay (milliseconds)
const closeBtnDelay = 3000;

// ⏱️ Auto close popup after delay (milliseconds)
const autoCloseDelay = 20000;

// 🔐 Encode popup identifier to base64 for tracking
function utf8ToBase64(str) {
  return btoa(unescape(encodeURIComponent(str)));
}

// ✅ Load and inject the popup's HTML into current page body
async function loadPopupHTML() {
  try {
    const response = await fetch(htmlUrl);
    const htmlText = await response.text();

    const wrapper = document.createElement("div");
    wrapper.innerHTML = htmlText.trim();
    document.body.appendChild(wrapper);

    console.log("✅ Popup HTML loaded and injected.");
  } catch (error) {
    console.error("❌ Popup HTML load failed:", error);
  }
}

// ✅ Dynamically inject the external CSS file
function injectPopupCSS() {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = cssUrl;
  document.head.appendChild(link);
}

// ✅ Function: Validate license key and current domain
function isLicenseValid(data) {
  const currentDomain = window.location.hostname.replace('www.', '');
  return (
    Array.isArray(data.allowedDomains) &&
    data.allowedDomains.includes(currentDomain) &&
    data.licenseKey === "NewspaperReports-AS - Life Official"
  );
}

// 🚨 Report misuse via mailto link if license validation fails
function reportLicenseViolation(data) {
  const adminEmail = data.notification || "asupdatemedia518@gmail.com";
  const subject = encodeURIComponent("🚨 লাইসেন্স ছাড়া PopUp ব্যবহারের চেষ্টা");
  const body = encodeURIComponent(
    `❌ লাইসেন্স চেক ব্যর্থ!\n\n🌐 Current Domain: ${window.location.hostname}\n🕓 Time: ${new Date().toLocaleString()}\n\nJSON Info:\n${JSON.stringify(data, null, 2)}`
  );
  window.open(`mailto:${adminEmail}?subject=${subject}&body=${body}`, "_blank");
}

// 🗃️ Variable to track popup ID (used in localStorage)
let currentPopupId = null;

// 🚀 DOM Ready: Load HTML/CSS first, then fetch data
document.addEventListener("DOMContentLoaded", async () => {
  await loadPopupHTML();        // ⬅️ Inject the HTML popup layout
  injectPopupCSS();             // ⬅️ Add the CSS style
  loadNotificationData();       // ⬅️ Start main logic

  // ✋ Close button action
  document.addEventListener("click", (e) => {
    if (e.target.id === "popupCloseBtn") {
      localStorage.setItem("popup_closed_by_user", "1");
      localStorage.setItem("popup_last_seen_id", currentPopupId);
      handleCloseOrVisit();
    }
  });

  // 🔁 Auto-refresh every 30 seconds
  setInterval(loadNotificationData, 30000);
});

// 📥 Main function to fetch popup data and control display
async function loadNotificationData() {
  try {
    const response = await fetch(jsonUrl, { cache: "no-cache" });
    if (!response.ok) throw new Error("❌ JSON ডেটা লোড করা যায়নি");
    const data = await response.json();

    // ✅ License check
    if (!isLicenseValid(data)) {
      console.warn("❌ লাইসেন্স চেক ব্যর্থ");
      reportLicenseViolation(data);
      return;
    }

    // 🚫 If status is off, do nothing
    if (data.status?.toLowerCase() === "off") return;

    // 🧪 Enable console log (controlled by JSON "console" key)
    const enableConsole = !(data.console?.toLowerCase() === "off");

    // 🔁 Create unique popup ID from content
    const identifier = `${data.title}|${data.image}|${data.buttonText}|${data.link}`;
    const encodedIdentifier = utf8ToBase64(identifier);
    currentPopupId = encodedIdentifier;

    // 🧠 Check user's popup history from localStorage
    const lastSeen = localStorage.getItem("popup_last_seen_id");
    const popupClosedByUser = localStorage.getItem("popup_closed_by_user");

    const popup = document.getElementById("adminNotification");

    // 🔄 Already open? only reload if content changed
    if (popup?.style.display === "block") {
      if (lastSeen !== encodedIdentifier) {
        handleCloseOrVisit(() => {
          showNotificationFromJSON(data, encodedIdentifier);
        });
      }
      return;
    }

    // ❌ Already closed by user? skip
    if (lastSeen === encodedIdentifier && popupClosedByUser === "1") return;

    // ✅ Finally show popup
    showNotificationFromJSON(data, encodedIdentifier);
    if (enableConsole) console.log("✅ Popup data loaded:", data);

  } catch (e) {
    console.error("❌ Notification loading error:", e);
  }
}

// 📤 Render the popup using the fetched JSON data
function showNotificationFromJSON(data, encodedIdentifier) {
  const popup = document.getElementById("adminNotification");
  if (!popup) return;

  // 🖼️ Set image
  document.getElementById("popupImg").src = data.image;
  document.getElementById("popupImgSrc").srcset = data.image;

  // 📝 Set title and button text
  document.getElementById("popupTitle").textContent = data.title;
  document.getElementById("popupBtn").querySelector("span").textContent = data.buttonText;

  // 🔗 Setup link click with new event listener
  const oldLinkEl = document.getElementById("popupLink");
  const newLinkEl = oldLinkEl.cloneNode(true);
  oldLinkEl.parentNode.replaceChild(newLinkEl, oldLinkEl);
  newLinkEl.href = data.link;

  newLinkEl.addEventListener("click", (e) => {
    e.preventDefault();
    localStorage.setItem("popup_last_seen_id", encodedIdentifier);
    localStorage.setItem("popup_closed_by_user", "1");
    window.open(data.link, "_blank");
    handleCloseOrVisit();
  });

  // 🎬 Animate popup show
  popup.style.display = "block";
  popup.classList.remove("fade-out");
  void popup.offsetWidth; // ✅ force reflow to restart animation
  popup.classList.add("fade-in");

  // ⏱️ Show close button after delay
  setTimeout(() => {
    const closeBtn = document.getElementById("popupCloseBtn");
    if (closeBtn) closeBtn.classList.add("show");
  }, closeBtnDelay);

  // ⏱️ Auto close popup after fixed delay
  setTimeout(() => {
    if (popup.style.display === "block") {
      handleCloseOrVisit();
    }
  }, autoCloseDelay);
}

// ❌ Handle closing popup animation and cleanup
function handleCloseOrVisit(callback) {
  const popup = document.getElementById("adminNotification");
  if (!popup) return;

  const closeBtn = document.getElementById("popupCloseBtn");
  if (closeBtn) closeBtn.classList.remove("show");

  popup.classList.remove("fade-in");
  popup.classList.add("fade-out");

  setTimeout(() => {
    popup.style.display = "none";
    if (typeof callback === "function") callback();
  }, 300);
}
